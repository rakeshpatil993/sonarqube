pipeline{
    agent any
    tools {
        maven 'maven3'
    }
    stages{
        stage("SCM"){
            steps{
                git 'https://github.com/rakeshpatil993/sonarqube.git'
            }
        }
        stage("Build Artifact") {
            steps{
                sh "mvn clean package"
            }
        }
        stage("Deploy to Sonar") {
            steps{
                withSonarQubeEnv(installationName: 'sonar-scanner', credentialsId: 'sonar-token') {
                    sh "${ tool ("sonar-scanner")}/sonar-scanner -Dsonar.projectKey=hellospringboot -Dsonar.projectName=hellospringboot -Dsonar.sourceEncoding=UTF-8 -Dsonar.sources=src"
                }
            }
        }
	stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
                }
            }
        }
        stage("Publish to Nexus Repository Manager") {
            steps {
                script{
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "* File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "* File: ${artifactPath}, could not be found";
                    }
                }
           }
        }
        stage("Docker Image"){
            steps{
                sh "docker build -t rakeshpatil993/springboohello:${ImagTag} ."
            }
        }
        stage("Docker Push"){
            steps{
                withCredentials([usernamePassword(credentialsId: 'docker_credentials', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh "docker login -u ${username} -p ${password}"
                }
                sh "docker push cloudtechmasters/springboohello:${ImagTag}"
            }
        }
    post {
        success {
            mail bcc: '', body: 'Maven artifact build successfully', cc: '', from: '', replyTo: '', subject: 'The Pipeline success', to: 'rakesh.patil3419@gmail.com'
        }
        failure {  
            mail bcc: '', body: 'Maven artifact build failed', cc: '', from: '', replyTo: '', subject: 'The Pipeline failed', to: 'rakesh.patil3419@gmail.com'
         } 
    }
}
